{"ast":null,"code":"import _objectSpread from \"/Users/flatironstudent/Desktop/Joseph/Module4/uno/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/flatironstudent/Desktop/Joseph/Module4/uno/front-end/src/Components/GameScreen.js\";\nimport React, { Component } from \"react\";\nimport cards from \"../cards\";\nimport GamePlay from \"./GamePlay\";\nimport ColorSelect from './ColorSelect';\nimport { io } from \"../Socket\";\nexport default class GameScreen extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      allCards: [],\n      game: null,\n      players: [],\n      creator: {},\n      player: {\n        user: {},\n        cards: []\n      },\n      deal: false,\n      drawCards: [],\n      turn: null,\n      discard: null,\n      drawAmount: 0,\n      colorSelect: false,\n      playedCard: null\n    };\n\n    this.handleColorSelect = color => {\n      if (this.state.playedCard.type === 'wild') {\n        let playedCard = _objectSpread({}, this.state.playedCard, {\n          color: color\n        });\n\n        this.setState({\n          playedCard: null\n        });\n        return io.emit('wild.play', playedCard);\n      }\n\n      if (this.state.playedCard.type === '+4') {\n        let playedCard = _objectSpread({}, this.state.playedCard, {\n          color: color\n        });\n\n        this.setState({\n          playedCard: null\n        });\n        return io.emit('draw4.play', playedCard);\n      }\n    };\n\n    this.deal = () => {\n      if (this.state.player.user.id == this.state.turn.id) {\n        let x = 0;\n        let drawCards = this.state.drawCards;\n\n        while (x < 7) {\n          let randomNumber = Math.floor(Math.random() * drawCards.length);\n          let drawnCard = drawCards[randomNumber];\n          this.state.player.cards.push(drawnCard);\n          drawCards = drawCards.filter(card => card != drawnCard);\n          x = x + 1;\n        }\n\n        this.setState({\n          drawCards\n        });\n        io.emit('cards.dealt', drawCards);\n        io.emit('next.deal', this.state.turn);\n      }\n    };\n\n    this.getCreator = id => {\n      io.emit(\"creator.get\", id);\n      io.on(\"creator.send\", creator => {\n        this.setState({\n          players: [...this.props.players, creator],\n          creator: creator,\n          turn: this.state.players[0]\n        });\n      });\n    };\n\n    this.handleDeal = () => {\n      io.emit(\"deal\");\n    };\n\n    this.handleDraw = () => {\n      if (this.state.player.user.id === this.state.turn.id) {\n        if (this.state.drawAmount == 0) {\n          let drawCards = this.state.drawCards;\n          let randomNumber = Math.floor(Math.random() * drawCards.length);\n          let drawnCard = drawCards[randomNumber];\n          drawCards = drawCards.filter(card => card.id != drawnCard.id);\n          this.setState({\n            player: _objectSpread({}, this.state.player, {\n              cards: [...this.state.player.cards, drawnCard]\n            })\n          });\n          return io.emit('draw', drawCards);\n        }\n\n        let drawAmount = this.state.drawAmount;\n        let drawCards = this.state.drawCards;\n        let drawnCards = [];\n\n        while (drawAmount > 0) {\n          let randomNumber = Math.floor(Math.random() * drawCards.length);\n          let drawnCard = drawCards[randomNumber];\n          drawCards = drawCards.filter(card => card.id != drawnCard.id);\n          drawnCards.push(drawnCard);\n          drawAmount = drawAmount - 1;\n        }\n\n        this.setState({\n          player: _objectSpread({}, this.state.player, {\n            cards: [...this.state.player.cards, ...drawnCards]\n          })\n        });\n        io.emit('draw', drawCards);\n      }\n    };\n\n    this.handlePlay = playedCard => {\n      console.log(playedCard);\n      let drawAmount = this.state.drawAmount;\n\n      if (this.state.player.user.id === this.state.turn.id) {\n        if (!this.state.discard) {\n          if (playedCard.type == 'wild') {\n            this.setState({\n              colorSelect: true,\n              playedCard\n            });\n          }\n\n          if (playedCard.type == 'wild') {\n            this.setState({\n              colorSelect: true,\n              playedCard\n            });\n          }\n\n          if (playedCard.type == '+2') {\n            return io.emit('draw2.play', playedCard);\n          }\n\n          if (playedCard.type == 'skip') {\n            return io.emit('skip.play', playedCard);\n          }\n\n          if (playedCard.type == 'reverse') {\n            return io.emit('reverse.play', playedCard);\n          }\n\n          return io.emit('normal.play', playedCard);\n        }\n\n        if (drawAmount == 0) {\n          if (playedCard.type == 'wild') {\n            this.setState({\n              colorSelect: true,\n              playedCard\n            });\n          }\n\n          if (playedCard.type == '+4') {\n            this.setState({\n              colorSelect: true,\n              playedCard\n            });\n          }\n\n          if (playedCard.type == this.state.discard.type || playedCard.color == this.state.discard.color) {\n            if (playedCard.type == '+2') {\n              return io.emit('draw2.play', playedCard);\n            }\n\n            if (playedCard.type == 'skip') {\n              return io.emit('skip.play', playedCard);\n            }\n\n            if (playedCard.type == 'reverse') {\n              return io.emit('reverse.play', playedCard);\n            }\n\n            return io.emit('normal.play', playedCard);\n          }\n        }\n\n        if (playedCard.type == this.state.discard.type) {\n          if (playedCard.type == '+4') {\n            this.setState({\n              colorSelect: true,\n              playedCard\n            });\n          }\n\n          if (playedCard.type == '+2') {\n            return io.emit('draw2.play', playedCard);\n          }\n        }\n      }\n    };\n\n    this.winner = player => {\n      // What happens when you win?\n      console.log(`${player.username} wins`);\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      allCards: cards,\n      game: this.props.game,\n      players: this.props.players,\n      player: {\n        user: this.props.user,\n        cards: []\n      },\n      drawCards: cards\n    });\n    this.getCreator(this.props.game.creator_id);\n    io.on('drawCards.new', cards => this.setState({\n      drawCards: cards\n    }));\n    io.on(\"dealt\", () => {\n      this.setState({\n        deal: true\n      });\n      this.deal();\n    });\n    io.on('next.dealt', ({\n      id\n    }) => {\n      let player = this.state.players.find(player => player.id === id);\n\n      if (this.state.players.indexOf(player) + 2 <= this.state.players.length) {\n        return this.setState({\n          turn: this.state.players[this.state.players.indexOf(player) + 1]\n        }, () => this.deal());\n      }\n\n      return this.setState({\n        turn: this.state.players[0]\n      });\n    });\n    io.on('drew', cards => {\n      let player = this.state.players.find(player => player.id === this.state.turn.id);\n      this.setState({\n        drawCards: cards,\n        drawAmount: 0,\n        turn: this.state.players.indexOf(player) + 1 >= this.state.players.length ? this.state.players[0] : this.state.players[this.state.players.indexOf(player) + 1]\n      });\n    });\n    io.on('normal.played', playedCard => {\n      let player = this.state.players.find(player => player.id === this.state.turn.id);\n      this.setState({\n        player: _objectSpread({}, this.state.player, {\n          cards: this.state.player.cards.filter(card => card.id != playedCard.id)\n        }),\n        discard: playedCard,\n        turn: this.state.players.indexOf(player) + 1 >= this.state.players.length ? this.state.players[0] : this.state.players[this.state.players.indexOf(player) + 1]\n      }, () => this.state.player.cards.length == 0 ? this.winner(this.state.player.user) : null);\n    });\n    io.on('skip.played', playedCard => {\n      let player = this.state.players.find(player => player.id === this.state.turn.id);\n      this.setState({\n        player: _objectSpread({}, this.state.player, {\n          cards: this.state.player.cards.filter(card => card.id != playedCard.id)\n        }),\n        discard: playedCard,\n        turn: this.state.players.indexOf(player) + 1 == this.state.players.length ? this.state.players[1] : this.state.players.indexOf(player) + 2 == this.state.players.length ? this.state.players[0] : this.state.players[this.state.players.indexOf(player) + 2]\n      }, () => this.state.player.cards.length == 0 ? this.winner(this.state.player.user) : null);\n    });\n    io.on('reverse.played', playedCard => {\n      let player = this.state.players.find(player => player.id === this.state.turn.id);\n      this.setState({\n        player: _objectSpread({}, this.state.player, {\n          cards: this.state.player.cards.filter(card => card.id != playedCard.id)\n        }),\n        discard: playedCard,\n        turn: this.state.players.indexOf(player) == 0 ? this.state.players[this.state.players.length - 1] : this.state.players[this.state.players.indexOf(player) - 1],\n        players: this.state.players.reverse()\n      }, () => this.state.player.cards.length == 0 ? this.winner(this.state.player.user) : null);\n    });\n    io.on('draw2.played', playedCard => {\n      let player = this.state.players.find(player => player.id === this.state.turn.id);\n      this.setState({\n        player: _objectSpread({}, this.state.player, {\n          cards: this.state.player.cards.filter(card => card.id != playedCard.id)\n        }),\n        discard: playedCard,\n        turn: this.state.players.indexOf(player) + 1 >= this.state.players.length ? this.state.players[0] : this.state.players[this.state.players.indexOf(player) + 1],\n        drawAmount: this.state.drawAmount + 2\n      }, () => this.state.player.cards.length == 0 ? this.winner(this.state.player.user) : null);\n    });\n    io.on('draw4.played', playedCard => {\n      let player = this.state.players.find(player => player.id === this.state.turn.id);\n      this.setState({\n        player: _objectSpread({}, this.state.player, {\n          cards: this.state.player.cards.filter(card => card.id != playedCard.id)\n        }),\n        discard: playedCard,\n        turn: this.state.players.indexOf(player) + 1 >= this.state.players.length ? this.state.players[0] : this.state.players[this.state.players.indexOf(player) + 1],\n        drawAmount: this.state.drawAmount + 4,\n        colorSelect: false\n      }, () => this.state.player.cards.length == 0 ? this.winner(this.state.player.user) : null);\n    });\n    io.on('wild.played', playedCard => {\n      let player = this.state.players.find(player => player.id === this.state.turn.id);\n      this.setState({\n        player: _objectSpread({}, this.state.player, {\n          cards: this.state.player.cards.filter(card => card.id != playedCard.id)\n        }),\n        discard: playedCard,\n        turn: this.state.players.indexOf(player) + 1 >= this.state.players.length ? this.state.players[0] : this.state.players[this.state.players.indexOf(player) + 1],\n        colorSelect: false\n      }, () => this.state.player.cards.length == 0 ? this.winner(this.state.player.user) : null);\n    });\n  }\n\n  render() {\n    if (this.state.deal) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }, this.state.colorSelect ? React.createElement(ColorSelect, {\n        handleColorSelect: this.handleColrSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }) : React.createElement(GamePlay, {\n        drawCards: this.state.drawCards,\n        cards: this.state.player.cards,\n        turn: this.state.turn.username,\n        handlePlay: this.handlePlay,\n        discard: this.state.discard,\n        handleDraw: this.handleDraw,\n        colorSelect: this.state.colorSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(\"div\", {\n      className: \"ui raised very padded text container segment form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, this.state.game ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, this.state.game.name), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, this.state.player.user.username), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, \"Creator: \", this.state.creator.username)) : null, this.state.players.map(player => {\n      return React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }, player.username);\n    }), this.props.user.id == this.state.creator.id ? React.createElement(\"div\", {\n      className: \"ui massive green button\",\n      onClick: this.handleDeal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, \"Deal\") : null);\n  }\n\n}","map":{"version":3,"sources":["/Users/flatironstudent/Desktop/Joseph/Module4/uno/front-end/src/Components/GameScreen.js"],"names":["React","Component","cards","GamePlay","ColorSelect","io","GameScreen","state","allCards","game","players","creator","player","user","deal","drawCards","turn","discard","drawAmount","colorSelect","playedCard","handleColorSelect","color","type","setState","emit","id","x","randomNumber","Math","floor","random","length","drawnCard","push","filter","card","getCreator","on","props","handleDeal","handleDraw","drawnCards","handlePlay","console","log","winner","username","componentDidMount","creator_id","find","indexOf","reverse","render","handleColrSelect","name","map"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,EAAT,QAAmB,WAAnB;AAEA,eAAe,MAAMC,UAAN,SAAyBL,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAChDM,KADgD,GACxC;AACNC,MAAAA,QAAQ,EAAE,EADJ;AAENC,MAAAA,IAAI,EAAE,IAFA;AAGNC,MAAAA,OAAO,EAAE,EAHH;AAINC,MAAAA,OAAO,EAAE,EAJH;AAKNC,MAAAA,MAAM,EAAE;AACNC,QAAAA,IAAI,EAAE,EADA;AAENX,QAAAA,KAAK,EAAE;AAFD,OALF;AASNY,MAAAA,IAAI,EAAE,KATA;AAUNC,MAAAA,SAAS,EAAE,EAVL;AAWNC,MAAAA,IAAI,EAAE,IAXA;AAYNC,MAAAA,OAAO,EAAE,IAZH;AAaNC,MAAAA,UAAU,EAAE,CAbN;AAcNC,MAAAA,WAAW,EAAE,KAdP;AAeNC,MAAAA,UAAU,EAAE;AAfN,KADwC;;AAAA,SAmBhDC,iBAnBgD,GAmB3BC,KAAK,IAAI;AAC5B,UAAG,KAAKf,KAAL,CAAWa,UAAX,CAAsBG,IAAtB,KAA+B,MAAlC,EAAyC;AACvC,YAAIH,UAAU,qBAAQ,KAAKb,KAAL,CAAWa,UAAnB;AAA+BE,UAAAA,KAAK,EAAEA;AAAtC,UAAd;;AACA,aAAKE,QAAL,CAAc;AAAEJ,UAAAA,UAAU,EAAE;AAAd,SAAd;AACA,eAAOf,EAAE,CAACoB,IAAH,CAAQ,WAAR,EAAqBL,UAArB,CAAP;AACD;;AACD,UAAG,KAAKb,KAAL,CAAWa,UAAX,CAAsBG,IAAtB,KAA+B,IAAlC,EAAuC;AACrC,YAAIH,UAAU,qBAAQ,KAAKb,KAAL,CAAWa,UAAnB;AAA+BE,UAAAA,KAAK,EAAEA;AAAtC,UAAd;;AACA,aAAKE,QAAL,CAAc;AAAEJ,UAAAA,UAAU,EAAE;AAAd,SAAd;AACA,eAAOf,EAAE,CAACoB,IAAH,CAAQ,YAAR,EAAsBL,UAAtB,CAAP;AACD;AACF,KA9B+C;;AAAA,SAyHhDN,IAzHgD,GAyHzC,MAAM;AACX,UAAG,KAAKP,KAAL,CAAWK,MAAX,CAAkBC,IAAlB,CAAuBa,EAAvB,IAA6B,KAAKnB,KAAL,CAAWS,IAAX,CAAgBU,EAAhD,EAAmD;AACjD,YAAIC,CAAC,GAAG,CAAR;AACA,YAAIZ,SAAS,GAAG,KAAKR,KAAL,CAAWQ,SAA3B;;AACA,eAAOY,CAAC,GAAG,CAAX,EAAc;AACZ,cAAIC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBhB,SAAS,CAACiB,MAArC,CAAnB;AACA,cAAIC,SAAS,GAAGlB,SAAS,CAACa,YAAD,CAAzB;AAEA,eAAKrB,KAAL,CAAWK,MAAX,CAAkBV,KAAlB,CAAwBgC,IAAxB,CAA6BD,SAA7B;AACAlB,UAAAA,SAAS,GAAGA,SAAS,CAACoB,MAAV,CAAiBC,IAAI,IAAIA,IAAI,IAAIH,SAAjC,CAAZ;AACAN,UAAAA,CAAC,GAAGA,CAAC,GAAG,CAAR;AACD;;AACD,aAAKH,QAAL,CAAc;AAAET,UAAAA;AAAF,SAAd;AACAV,QAAAA,EAAE,CAACoB,IAAH,CAAQ,aAAR,EAAuBV,SAAvB;AACAV,QAAAA,EAAE,CAACoB,IAAH,CAAQ,WAAR,EAAqB,KAAKlB,KAAL,CAAWS,IAAhC;AACD;AACF,KAzI+C;;AAAA,SA2IhDqB,UA3IgD,GA2InCX,EAAE,IAAI;AACjBrB,MAAAA,EAAE,CAACoB,IAAH,CAAQ,aAAR,EAAuBC,EAAvB;AACArB,MAAAA,EAAE,CAACiC,EAAH,CAAM,cAAN,EAAsB3B,OAAO,IAAI;AAC/B,aAAKa,QAAL,CAAc;AACZd,UAAAA,OAAO,EAAE,CAAC,GAAG,KAAK6B,KAAL,CAAW7B,OAAf,EAAwBC,OAAxB,CADG;AAEZA,UAAAA,OAAO,EAAEA,OAFG;AAGZK,UAAAA,IAAI,EAAE,KAAKT,KAAL,CAAWG,OAAX,CAAmB,CAAnB;AAHM,SAAd;AAKD,OAND;AAOD,KApJ+C;;AAAA,SAsJhD8B,UAtJgD,GAsJnC,MAAM;AACjBnC,MAAAA,EAAE,CAACoB,IAAH,CAAQ,MAAR;AACD,KAxJ+C;;AAAA,SA0JhDgB,UA1JgD,GA0JnC,MAAM;AACjB,UAAG,KAAKlC,KAAL,CAAWK,MAAX,CAAkBC,IAAlB,CAAuBa,EAAvB,KAA8B,KAAKnB,KAAL,CAAWS,IAAX,CAAgBU,EAAjD,EAAoD;AAClD,YAAG,KAAKnB,KAAL,CAAWW,UAAX,IAAyB,CAA5B,EAA8B;AAC5B,cAAIH,SAAS,GAAG,KAAKR,KAAL,CAAWQ,SAA3B;AAEA,cAAIa,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBhB,SAAS,CAACiB,MAArC,CAAnB;AACA,cAAIC,SAAS,GAAGlB,SAAS,CAACa,YAAD,CAAzB;AACAb,UAAAA,SAAS,GAAGA,SAAS,CAACoB,MAAV,CAAiBC,IAAI,IAAIA,IAAI,CAACV,EAAL,IAAWO,SAAS,CAACP,EAA9C,CAAZ;AAEA,eAAKF,QAAL,CAAc;AAACZ,YAAAA,MAAM,oBAAM,KAAKL,KAAL,CAAWK,MAAjB;AAAyBV,cAAAA,KAAK,EAAE,CAAC,GAAG,KAAKK,KAAL,CAAWK,MAAX,CAAkBV,KAAtB,EAA6B+B,SAA7B;AAAhC;AAAP,WAAd;AACA,iBAAO5B,EAAE,CAACoB,IAAH,CAAQ,MAAR,EAAgBV,SAAhB,CAAP;AACD;;AAED,YAAIG,UAAU,GAAG,KAAKX,KAAL,CAAWW,UAA5B;AACA,YAAIH,SAAS,GAAG,KAAKR,KAAL,CAAWQ,SAA3B;AACA,YAAI2B,UAAU,GAAG,EAAjB;;AAEA,eAAMxB,UAAU,GAAG,CAAnB,EAAqB;AACnB,cAAIU,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBhB,SAAS,CAACiB,MAArC,CAAnB;AACA,cAAIC,SAAS,GAAGlB,SAAS,CAACa,YAAD,CAAzB;AACAb,UAAAA,SAAS,GAAGA,SAAS,CAACoB,MAAV,CAAiBC,IAAI,IAAIA,IAAI,CAACV,EAAL,IAAWO,SAAS,CAACP,EAA9C,CAAZ;AACAgB,UAAAA,UAAU,CAACR,IAAX,CAAgBD,SAAhB;AAEAf,UAAAA,UAAU,GAAGA,UAAU,GAAG,CAA1B;AACD;;AACD,aAAKM,QAAL,CAAc;AAACZ,UAAAA,MAAM,oBAAM,KAAKL,KAAL,CAAWK,MAAjB;AAAyBV,YAAAA,KAAK,EAAE,CAAC,GAAG,KAAKK,KAAL,CAAWK,MAAX,CAAkBV,KAAtB,EAA6B,GAAGwC,UAAhC;AAAhC;AAAP,SAAd;AACArC,QAAAA,EAAE,CAACoB,IAAH,CAAQ,MAAR,EAAgBV,SAAhB;AACD;AACF,KAtL+C;;AAAA,SAwLhD4B,UAxLgD,GAwLlCvB,UAAD,IAAgB;AAC3BwB,MAAAA,OAAO,CAACC,GAAR,CAAYzB,UAAZ;AACA,UAAIF,UAAU,GAAG,KAAKX,KAAL,CAAWW,UAA5B;;AACA,UAAG,KAAKX,KAAL,CAAWK,MAAX,CAAkBC,IAAlB,CAAuBa,EAAvB,KAA8B,KAAKnB,KAAL,CAAWS,IAAX,CAAgBU,EAAjD,EAAoD;AAClD,YAAG,CAAC,KAAKnB,KAAL,CAAWU,OAAf,EAAuB;AACrB,cAAGG,UAAU,CAACG,IAAX,IAAmB,MAAtB,EAA6B;AAC3B,iBAAKC,QAAL,CAAc;AACZL,cAAAA,WAAW,EAAE,IADD;AAEZC,cAAAA;AAFY,aAAd;AAID;;AACD,cAAGA,UAAU,CAACG,IAAX,IAAmB,MAAtB,EAA6B;AAC3B,iBAAKC,QAAL,CAAc;AACZL,cAAAA,WAAW,EAAE,IADD;AAEZC,cAAAA;AAFY,aAAd;AAID;;AACD,cAAGA,UAAU,CAACG,IAAX,IAAmB,IAAtB,EAA2B;AACzB,mBAAOlB,EAAE,CAACoB,IAAH,CAAQ,YAAR,EAAsBL,UAAtB,CAAP;AACD;;AACD,cAAGA,UAAU,CAACG,IAAX,IAAmB,MAAtB,EAA6B;AAC3B,mBAAOlB,EAAE,CAACoB,IAAH,CAAQ,WAAR,EAAqBL,UAArB,CAAP;AACD;;AACD,cAAGA,UAAU,CAACG,IAAX,IAAmB,SAAtB,EAAgC;AAC9B,mBAAOlB,EAAE,CAACoB,IAAH,CAAQ,cAAR,EAAwBL,UAAxB,CAAP;AACD;;AACD,iBAAOf,EAAE,CAACoB,IAAH,CAAQ,aAAR,EAAuBL,UAAvB,CAAP;AACD;;AACD,YAAGF,UAAU,IAAI,CAAjB,EAAmB;AACjB,cAAGE,UAAU,CAACG,IAAX,IAAmB,MAAtB,EAA6B;AAC3B,iBAAKC,QAAL,CAAc;AACZL,cAAAA,WAAW,EAAE,IADD;AAEZC,cAAAA;AAFY,aAAd;AAID;;AACD,cAAGA,UAAU,CAACG,IAAX,IAAmB,IAAtB,EAA2B;AACzB,iBAAKC,QAAL,CAAc;AACZL,cAAAA,WAAW,EAAE,IADD;AAEZC,cAAAA;AAFY,aAAd;AAID;;AACD,cAAIA,UAAU,CAACG,IAAX,IAAmB,KAAKhB,KAAL,CAAWU,OAAX,CAAmBM,IAAvC,IAAiDH,UAAU,CAACE,KAAX,IAAoB,KAAKf,KAAL,CAAWU,OAAX,CAAmBK,KAA3F,EAAkG;AAChG,gBAAGF,UAAU,CAACG,IAAX,IAAmB,IAAtB,EAA2B;AACzB,qBAAOlB,EAAE,CAACoB,IAAH,CAAQ,YAAR,EAAsBL,UAAtB,CAAP;AACD;;AACD,gBAAGA,UAAU,CAACG,IAAX,IAAmB,MAAtB,EAA6B;AAC3B,qBAAOlB,EAAE,CAACoB,IAAH,CAAQ,WAAR,EAAqBL,UAArB,CAAP;AACD;;AACD,gBAAGA,UAAU,CAACG,IAAX,IAAmB,SAAtB,EAAgC;AAC9B,qBAAOlB,EAAE,CAACoB,IAAH,CAAQ,cAAR,EAAwBL,UAAxB,CAAP;AACD;;AACD,mBAAOf,EAAE,CAACoB,IAAH,CAAQ,aAAR,EAAuBL,UAAvB,CAAP;AACD;AACF;;AACD,YAAGA,UAAU,CAACG,IAAX,IAAmB,KAAKhB,KAAL,CAAWU,OAAX,CAAmBM,IAAzC,EAA8C;AAC5C,cAAGH,UAAU,CAACG,IAAX,IAAmB,IAAtB,EAA2B;AACzB,iBAAKC,QAAL,CAAc;AACZL,cAAAA,WAAW,EAAE,IADD;AAEZC,cAAAA;AAFY,aAAd;AAID;;AACD,cAAGA,UAAU,CAACG,IAAX,IAAmB,IAAtB,EAA2B;AACzB,mBAAOlB,EAAE,CAACoB,IAAH,CAAQ,YAAR,EAAsBL,UAAtB,CAAP;AACD;AACF;AACF;AACF,KA1P+C;;AAAA,SA4PhD0B,MA5PgD,GA4PtClC,MAAD,IAAY;AACnB;AACAgC,MAAAA,OAAO,CAACC,GAAR,CAAa,GAAEjC,MAAM,CAACmC,QAAS,OAA/B;AACD,KA/P+C;AAAA;;AAgChDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKxB,QAAL,CAAc;AACZhB,MAAAA,QAAQ,EAAEN,KADE;AAEZO,MAAAA,IAAI,EAAE,KAAK8B,KAAL,CAAW9B,IAFL;AAGZC,MAAAA,OAAO,EAAE,KAAK6B,KAAL,CAAW7B,OAHR;AAIZE,MAAAA,MAAM,EAAE;AACNC,QAAAA,IAAI,EAAE,KAAK0B,KAAL,CAAW1B,IADX;AAENX,QAAAA,KAAK,EAAE;AAFD,OAJI;AAQZa,MAAAA,SAAS,EAAEb;AARC,KAAd;AAUA,SAAKmC,UAAL,CAAgB,KAAKE,KAAL,CAAW9B,IAAX,CAAgBwC,UAAhC;AACA5C,IAAAA,EAAE,CAACiC,EAAH,CAAM,eAAN,EAAwBpC,KAAD,IAAW,KAAKsB,QAAL,CAAc;AAACT,MAAAA,SAAS,EAAEb;AAAZ,KAAd,CAAlC;AACAG,IAAAA,EAAE,CAACiC,EAAH,CAAM,OAAN,EAAe,MAAM;AACnB,WAAKd,QAAL,CAAc;AAAEV,QAAAA,IAAI,EAAE;AAAR,OAAd;AACA,WAAKA,IAAL;AACD,KAHD;AAIAT,IAAAA,EAAE,CAACiC,EAAH,CAAM,YAAN,EAAoB,CAAC;AAAEZ,MAAAA;AAAF,KAAD,KAAY;AAC9B,UAAId,MAAM,GAAG,KAAKL,KAAL,CAAWG,OAAX,CAAmBwC,IAAnB,CAAwBtC,MAAM,IAAIA,MAAM,CAACc,EAAP,KAAcA,EAAhD,CAAb;;AACA,UAAI,KAAKnB,KAAL,CAAWG,OAAX,CAAmByC,OAAnB,CAA2BvC,MAA3B,IAAqC,CAArC,IAA0C,KAAKL,KAAL,CAAWG,OAAX,CAAmBsB,MAAjE,EAAwE;AACtE,eAAO,KAAKR,QAAL,CAAc;AACnBR,UAAAA,IAAI,EAAE,KAAKT,KAAL,CAAWG,OAAX,CAAmB,KAAKH,KAAL,CAAWG,OAAX,CAAmByC,OAAnB,CAA2BvC,MAA3B,IAAqC,CAAxD;AADa,SAAd,EAEJ,MAAM,KAAKE,IAAL,EAFF,CAAP;AAGD;;AACD,aAAO,KAAKU,QAAL,CAAc;AAACR,QAAAA,IAAI,EAAE,KAAKT,KAAL,CAAWG,OAAX,CAAmB,CAAnB;AAAP,OAAd,CAAP;AACD,KARD;AASAL,IAAAA,EAAE,CAACiC,EAAH,CAAM,MAAN,EAAepC,KAAD,IAAW;AACvB,UAAIU,MAAM,GAAG,KAAKL,KAAL,CAAWG,OAAX,CAAmBwC,IAAnB,CAAwBtC,MAAM,IAAIA,MAAM,CAACc,EAAP,KAAc,KAAKnB,KAAL,CAAWS,IAAX,CAAgBU,EAAhE,CAAb;AACA,WAAKF,QAAL,CAAc;AACZT,QAAAA,SAAS,EAAEb,KADC;AAEZgB,QAAAA,UAAU,EAAE,CAFA;AAGZF,QAAAA,IAAI,EAAG,KAAKT,KAAL,CAAWG,OAAX,CAAmByC,OAAnB,CAA2BvC,MAA3B,IAAqC,CAArC,IAA0C,KAAKL,KAAL,CAAWG,OAAX,CAAmBsB,MAA7D,GAAsE,KAAKzB,KAAL,CAAWG,OAAX,CAAmB,CAAnB,CAAtE,GAA8F,KAAKH,KAAL,CAAWG,OAAX,CAAmB,KAAKH,KAAL,CAAWG,OAAX,CAAmByC,OAAnB,CAA2BvC,MAA3B,IAAqC,CAAxD;AAHzF,OAAd;AAKD,KAPD;AAQAP,IAAAA,EAAE,CAACiC,EAAH,CAAM,eAAN,EAAwBlB,UAAD,IAAgB;AACrC,UAAIR,MAAM,GAAG,KAAKL,KAAL,CAAWG,OAAX,CAAmBwC,IAAnB,CAAwBtC,MAAM,IAAIA,MAAM,CAACc,EAAP,KAAc,KAAKnB,KAAL,CAAWS,IAAX,CAAgBU,EAAhE,CAAb;AACA,WAAKF,QAAL,CAAc;AACZZ,QAAAA,MAAM,oBAAM,KAAKL,KAAL,CAAWK,MAAjB;AAAyBV,UAAAA,KAAK,EAAE,KAAKK,KAAL,CAAWK,MAAX,CAAkBV,KAAlB,CAAwBiC,MAAxB,CAA+BC,IAAI,IAAIA,IAAI,CAACV,EAAL,IAAWN,UAAU,CAACM,EAA7D;AAAhC,UADM;AAEZT,QAAAA,OAAO,EAAEG,UAFG;AAGZJ,QAAAA,IAAI,EAAG,KAAKT,KAAL,CAAWG,OAAX,CAAmByC,OAAnB,CAA2BvC,MAA3B,IAAqC,CAArC,IAA0C,KAAKL,KAAL,CAAWG,OAAX,CAAmBsB,MAA7D,GAAsE,KAAKzB,KAAL,CAAWG,OAAX,CAAmB,CAAnB,CAAtE,GAA8F,KAAKH,KAAL,CAAWG,OAAX,CAAmB,KAAKH,KAAL,CAAWG,OAAX,CAAmByC,OAAnB,CAA2BvC,MAA3B,IAAqC,CAAxD;AAHzF,OAAd,EAIG,MAAM,KAAKL,KAAL,CAAWK,MAAX,CAAkBV,KAAlB,CAAwB8B,MAAxB,IAAkC,CAAlC,GAAsC,KAAKc,MAAL,CAAY,KAAKvC,KAAL,CAAWK,MAAX,CAAkBC,IAA9B,CAAtC,GAA4E,IAJrF;AAKD,KAPD;AAQAR,IAAAA,EAAE,CAACiC,EAAH,CAAM,aAAN,EAAsBlB,UAAD,IAAgB;AACnC,UAAIR,MAAM,GAAG,KAAKL,KAAL,CAAWG,OAAX,CAAmBwC,IAAnB,CAAwBtC,MAAM,IAAIA,MAAM,CAACc,EAAP,KAAc,KAAKnB,KAAL,CAAWS,IAAX,CAAgBU,EAAhE,CAAb;AACA,WAAKF,QAAL,CAAc;AACZZ,QAAAA,MAAM,oBAAM,KAAKL,KAAL,CAAWK,MAAjB;AAAyBV,UAAAA,KAAK,EAAE,KAAKK,KAAL,CAAWK,MAAX,CAAkBV,KAAlB,CAAwBiC,MAAxB,CAA+BC,IAAI,IAAIA,IAAI,CAACV,EAAL,IAAWN,UAAU,CAACM,EAA7D;AAAhC,UADM;AAEZT,QAAAA,OAAO,EAAEG,UAFG;AAGZJ,QAAAA,IAAI,EAAG,KAAKT,KAAL,CAAWG,OAAX,CAAmByC,OAAnB,CAA2BvC,MAA3B,IAAqC,CAArC,IAA0C,KAAKL,KAAL,CAAWG,OAAX,CAAmBsB,MAA7D,GAAsE,KAAKzB,KAAL,CAAWG,OAAX,CAAmB,CAAnB,CAAtE,GAA+F,KAAKH,KAAL,CAAWG,OAAX,CAAmByC,OAAnB,CAA2BvC,MAA3B,IAAqC,CAArC,IAA0C,KAAKL,KAAL,CAAWG,OAAX,CAAmBsB,MAA7D,GAAsE,KAAKzB,KAAL,CAAWG,OAAX,CAAmB,CAAnB,CAAtE,GAA8F,KAAKH,KAAL,CAAWG,OAAX,CAAmB,KAAKH,KAAL,CAAWG,OAAX,CAAmByC,OAAnB,CAA2BvC,MAA3B,IAAqC,CAAxD;AAHxL,OAAd,EAIG,MAAM,KAAKL,KAAL,CAAWK,MAAX,CAAkBV,KAAlB,CAAwB8B,MAAxB,IAAkC,CAAlC,GAAsC,KAAKc,MAAL,CAAY,KAAKvC,KAAL,CAAWK,MAAX,CAAkBC,IAA9B,CAAtC,GAA4E,IAJrF;AAKD,KAPD;AAQAR,IAAAA,EAAE,CAACiC,EAAH,CAAM,gBAAN,EAAyBlB,UAAD,IAAgB;AACtC,UAAIR,MAAM,GAAG,KAAKL,KAAL,CAAWG,OAAX,CAAmBwC,IAAnB,CAAwBtC,MAAM,IAAIA,MAAM,CAACc,EAAP,KAAc,KAAKnB,KAAL,CAAWS,IAAX,CAAgBU,EAAhE,CAAb;AACA,WAAKF,QAAL,CAAc;AACZZ,QAAAA,MAAM,oBAAM,KAAKL,KAAL,CAAWK,MAAjB;AAAyBV,UAAAA,KAAK,EAAE,KAAKK,KAAL,CAAWK,MAAX,CAAkBV,KAAlB,CAAwBiC,MAAxB,CAA+BC,IAAI,IAAIA,IAAI,CAACV,EAAL,IAAWN,UAAU,CAACM,EAA7D;AAAhC,UADM;AAEZT,QAAAA,OAAO,EAAEG,UAFG;AAGZJ,QAAAA,IAAI,EAAG,KAAKT,KAAL,CAAWG,OAAX,CAAmByC,OAAnB,CAA2BvC,MAA3B,KAAsC,CAAtC,GAA0C,KAAKL,KAAL,CAAWG,OAAX,CAAmB,KAAKH,KAAL,CAAWG,OAAX,CAAmBsB,MAAnB,GAA2B,CAA9C,CAA1C,GAA6F,KAAKzB,KAAL,CAAWG,OAAX,CAAmB,KAAKH,KAAL,CAAWG,OAAX,CAAmByC,OAAnB,CAA2BvC,MAA3B,IAAqC,CAAxD,CAHxF;AAIZF,QAAAA,OAAO,EAAE,KAAKH,KAAL,CAAWG,OAAX,CAAmB0C,OAAnB;AAJG,OAAd,EAKG,MAAM,KAAK7C,KAAL,CAAWK,MAAX,CAAkBV,KAAlB,CAAwB8B,MAAxB,IAAkC,CAAlC,GAAsC,KAAKc,MAAL,CAAY,KAAKvC,KAAL,CAAWK,MAAX,CAAkBC,IAA9B,CAAtC,GAA4E,IALrF;AAMD,KARD;AASAR,IAAAA,EAAE,CAACiC,EAAH,CAAM,cAAN,EAAuBlB,UAAD,IAAgB;AACpC,UAAIR,MAAM,GAAG,KAAKL,KAAL,CAAWG,OAAX,CAAmBwC,IAAnB,CAAwBtC,MAAM,IAAIA,MAAM,CAACc,EAAP,KAAc,KAAKnB,KAAL,CAAWS,IAAX,CAAgBU,EAAhE,CAAb;AACA,WAAKF,QAAL,CAAc;AACZZ,QAAAA,MAAM,oBAAM,KAAKL,KAAL,CAAWK,MAAjB;AAAyBV,UAAAA,KAAK,EAAE,KAAKK,KAAL,CAAWK,MAAX,CAAkBV,KAAlB,CAAwBiC,MAAxB,CAA+BC,IAAI,IAAIA,IAAI,CAACV,EAAL,IAAWN,UAAU,CAACM,EAA7D;AAAhC,UADM;AAEZT,QAAAA,OAAO,EAAEG,UAFG;AAGZJ,QAAAA,IAAI,EAAG,KAAKT,KAAL,CAAWG,OAAX,CAAmByC,OAAnB,CAA2BvC,MAA3B,IAAqC,CAArC,IAA0C,KAAKL,KAAL,CAAWG,OAAX,CAAmBsB,MAA7D,GAAsE,KAAKzB,KAAL,CAAWG,OAAX,CAAmB,CAAnB,CAAtE,GAA8F,KAAKH,KAAL,CAAWG,OAAX,CAAmB,KAAKH,KAAL,CAAWG,OAAX,CAAmByC,OAAnB,CAA2BvC,MAA3B,IAAqC,CAAxD,CAHzF;AAIZM,QAAAA,UAAU,EAAE,KAAKX,KAAL,CAAWW,UAAX,GAAwB;AAJxB,OAAd,EAKG,MAAM,KAAKX,KAAL,CAAWK,MAAX,CAAkBV,KAAlB,CAAwB8B,MAAxB,IAAkC,CAAlC,GAAsC,KAAKc,MAAL,CAAY,KAAKvC,KAAL,CAAWK,MAAX,CAAkBC,IAA9B,CAAtC,GAA4E,IALrF;AAMD,KARD;AASAR,IAAAA,EAAE,CAACiC,EAAH,CAAM,cAAN,EAAuBlB,UAAD,IAAgB;AACpC,UAAIR,MAAM,GAAG,KAAKL,KAAL,CAAWG,OAAX,CAAmBwC,IAAnB,CAAwBtC,MAAM,IAAIA,MAAM,CAACc,EAAP,KAAc,KAAKnB,KAAL,CAAWS,IAAX,CAAgBU,EAAhE,CAAb;AACA,WAAKF,QAAL,CAAc;AACZZ,QAAAA,MAAM,oBAAM,KAAKL,KAAL,CAAWK,MAAjB;AAAyBV,UAAAA,KAAK,EAAE,KAAKK,KAAL,CAAWK,MAAX,CAAkBV,KAAlB,CAAwBiC,MAAxB,CAA+BC,IAAI,IAAIA,IAAI,CAACV,EAAL,IAAWN,UAAU,CAACM,EAA7D;AAAhC,UADM;AAEZT,QAAAA,OAAO,EAAEG,UAFG;AAGZJ,QAAAA,IAAI,EAAG,KAAKT,KAAL,CAAWG,OAAX,CAAmByC,OAAnB,CAA2BvC,MAA3B,IAAqC,CAArC,IAA0C,KAAKL,KAAL,CAAWG,OAAX,CAAmBsB,MAA7D,GAAsE,KAAKzB,KAAL,CAAWG,OAAX,CAAmB,CAAnB,CAAtE,GAA8F,KAAKH,KAAL,CAAWG,OAAX,CAAmB,KAAKH,KAAL,CAAWG,OAAX,CAAmByC,OAAnB,CAA2BvC,MAA3B,IAAqC,CAAxD,CAHzF;AAIZM,QAAAA,UAAU,EAAE,KAAKX,KAAL,CAAWW,UAAX,GAAwB,CAJxB;AAKZC,QAAAA,WAAW,EAAE;AALD,OAAd,EAMG,MAAM,KAAKZ,KAAL,CAAWK,MAAX,CAAkBV,KAAlB,CAAwB8B,MAAxB,IAAkC,CAAlC,GAAsC,KAAKc,MAAL,CAAY,KAAKvC,KAAL,CAAWK,MAAX,CAAkBC,IAA9B,CAAtC,GAA4E,IANrF;AAOD,KATD;AAUAR,IAAAA,EAAE,CAACiC,EAAH,CAAM,aAAN,EAAsBlB,UAAD,IAAgB;AACnC,UAAIR,MAAM,GAAG,KAAKL,KAAL,CAAWG,OAAX,CAAmBwC,IAAnB,CAAwBtC,MAAM,IAAIA,MAAM,CAACc,EAAP,KAAc,KAAKnB,KAAL,CAAWS,IAAX,CAAgBU,EAAhE,CAAb;AACA,WAAKF,QAAL,CAAc;AACZZ,QAAAA,MAAM,oBAAM,KAAKL,KAAL,CAAWK,MAAjB;AAAyBV,UAAAA,KAAK,EAAE,KAAKK,KAAL,CAAWK,MAAX,CAAkBV,KAAlB,CAAwBiC,MAAxB,CAA+BC,IAAI,IAAIA,IAAI,CAACV,EAAL,IAAWN,UAAU,CAACM,EAA7D;AAAhC,UADM;AAEZT,QAAAA,OAAO,EAAEG,UAFG;AAGZJ,QAAAA,IAAI,EAAG,KAAKT,KAAL,CAAWG,OAAX,CAAmByC,OAAnB,CAA2BvC,MAA3B,IAAqC,CAArC,IAA0C,KAAKL,KAAL,CAAWG,OAAX,CAAmBsB,MAA7D,GAAsE,KAAKzB,KAAL,CAAWG,OAAX,CAAmB,CAAnB,CAAtE,GAA8F,KAAKH,KAAL,CAAWG,OAAX,CAAmB,KAAKH,KAAL,CAAWG,OAAX,CAAmByC,OAAnB,CAA2BvC,MAA3B,IAAqC,CAAxD,CAHzF;AAIZO,QAAAA,WAAW,EAAE;AAJD,OAAd,EAKG,MAAM,KAAKZ,KAAL,CAAWK,MAAX,CAAkBV,KAAlB,CAAwB8B,MAAxB,IAAkC,CAAlC,GAAsC,KAAKc,MAAL,CAAY,KAAKvC,KAAL,CAAWK,MAAX,CAAkBC,IAA9B,CAAtC,GAA4E,IALrF;AAMD,KARD;AASD;;AA0IDwC,EAAAA,MAAM,GAAG;AACP,QAAI,KAAK9C,KAAL,CAAWO,IAAf,EAAqB;AACnB,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKP,KAAL,CAAWY,WAAX,GAAyB,oBAAC,WAAD;AAAa,QAAA,iBAAiB,EAAE,KAAKmC,gBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAzB,GACC,oBAAC,QAAD;AACE,QAAA,SAAS,EAAE,KAAK/C,KAAL,CAAWQ,SADxB;AAEE,QAAA,KAAK,EAAE,KAAKR,KAAL,CAAWK,MAAX,CAAkBV,KAF3B;AAGE,QAAA,IAAI,EAAE,KAAKK,KAAL,CAAWS,IAAX,CAAgB+B,QAHxB;AAIE,QAAA,UAAU,EAAE,KAAKJ,UAJnB;AAKE,QAAA,OAAO,EAAE,KAAKpC,KAAL,CAAWU,OALtB;AAME,QAAA,UAAU,EAAE,KAAKwB,UANnB;AAOE,QAAA,WAAW,EAAE,KAAKlC,KAAL,CAAWY,WAP1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADF;AAcD;;AACD,WACE;AAAK,MAAA,SAAS,EAAC,mDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKZ,KAAL,CAAWE,IAAX,GACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKF,KAAL,CAAWE,IAAX,CAAgB8C,IAArB,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKhD,KAAL,CAAWK,MAAX,CAAkBC,IAAlB,CAAuBkC,QAA5B,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAc,KAAKxC,KAAL,CAAWI,OAAX,CAAmBoC,QAAjC,CAHF,CADD,GAMG,IAPN,EAQG,KAAKxC,KAAL,CAAWG,OAAX,CAAmB8C,GAAnB,CAAuB5C,MAAM,IAAI;AAChC,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKA,MAAM,CAACmC,QAAZ,CAAP;AACD,KAFA,CARH,EAWG,KAAKR,KAAL,CAAW1B,IAAX,CAAgBa,EAAhB,IAAsB,KAAKnB,KAAL,CAAWI,OAAX,CAAmBe,EAAzC,GACC;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAyC,MAAA,OAAO,EAAE,KAAKc,UAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,GAIG,IAfN,CADF;AAmBD;;AArS+C","sourcesContent":["import React, { Component } from \"react\";\nimport cards from \"../cards\";\nimport GamePlay from \"./GamePlay\";\nimport ColorSelect from './ColorSelect'\nimport { io } from \"../Socket\";\n\nexport default class GameScreen extends Component {\n  state = {\n    allCards: [],\n    game: null,\n    players: [],\n    creator: {},\n    player: {\n      user: {},\n      cards: []\n    },\n    deal: false,\n    drawCards: [],\n    turn: null,\n    discard: null,\n    drawAmount: 0,\n    colorSelect: false,\n    playedCard: null\n  };\n\n  handleColorSelect =  color => {\n    if(this.state.playedCard.type === 'wild'){\n      let playedCard = { ...this.state.playedCard, color: color }\n      this.setState({ playedCard: null })\n      return io.emit('wild.play', playedCard)\n    }\n    if(this.state.playedCard.type === '+4'){\n      let playedCard = { ...this.state.playedCard, color: color }\n      this.setState({ playedCard: null })\n      return io.emit('draw4.play', playedCard)\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      allCards: cards,\n      game: this.props.game,\n      players: this.props.players,\n      player: {\n        user: this.props.user,\n        cards: []\n      },\n      drawCards: cards,\n    });\n    this.getCreator(this.props.game.creator_id);\n    io.on('drawCards.new', (cards) => this.setState({drawCards: cards}))\n    io.on(\"dealt\", () => {\n      this.setState({ deal: true });\n      this.deal();\n    });\n    io.on('next.dealt', ({ id }) => {\n      let player = this.state.players.find(player => player.id === id)\n      if( this.state.players.indexOf(player) + 2 <= this.state.players.length){\n        return this.setState({\n          turn: this.state.players[this.state.players.indexOf(player) + 1]\n        }, () => this.deal())\n      }\n      return this.setState({turn: this.state.players[0]})\n    })\n    io.on('drew', (cards) => {\n      let player = this.state.players.find(player => player.id === this.state.turn.id)\n      this.setState({\n        drawCards: cards,\n        drawAmount: 0,\n        turn: (this.state.players.indexOf(player) + 1 >= this.state.players.length ? this.state.players[0] : this.state.players[this.state.players.indexOf(player) + 1])\n      })\n    })\n    io.on('normal.played', (playedCard) => {\n      let player = this.state.players.find(player => player.id === this.state.turn.id)\n      this.setState({\n        player: {...this.state.player, cards: this.state.player.cards.filter(card => card.id != playedCard.id)},\n        discard: playedCard,\n        turn: (this.state.players.indexOf(player) + 1 >= this.state.players.length ? this.state.players[0] : this.state.players[this.state.players.indexOf(player) + 1])\n      }, () => this.state.player.cards.length == 0 ? this.winner(this.state.player.user) : null)\n    })\n    io.on('skip.played', (playedCard) => {\n      let player = this.state.players.find(player => player.id === this.state.turn.id)\n      this.setState({\n        player: {...this.state.player, cards: this.state.player.cards.filter(card => card.id != playedCard.id)},\n        discard: playedCard,\n        turn: (this.state.players.indexOf(player) + 1 == this.state.players.length ? this.state.players[1] : (this.state.players.indexOf(player) + 2 == this.state.players.length ? this.state.players[0] : this.state.players[this.state.players.indexOf(player) + 2]))\n      }, () => this.state.player.cards.length == 0 ? this.winner(this.state.player.user) : null)\n    })\n    io.on('reverse.played', (playedCard) => {\n      let player = this.state.players.find(player => player.id === this.state.turn.id)\n      this.setState({\n        player: {...this.state.player, cards: this.state.player.cards.filter(card => card.id != playedCard.id)},\n        discard: playedCard,\n        turn: (this.state.players.indexOf(player) == 0 ? this.state.players[this.state.players.length -1] : this.state.players[this.state.players.indexOf(player) - 1]),\n        players: this.state.players.reverse()\n      }, () => this.state.player.cards.length == 0 ? this.winner(this.state.player.user) : null)\n    })\n    io.on('draw2.played', (playedCard) => {\n      let player = this.state.players.find(player => player.id === this.state.turn.id)\n      this.setState({\n        player: {...this.state.player, cards: this.state.player.cards.filter(card => card.id != playedCard.id)},\n        discard: playedCard,\n        turn: (this.state.players.indexOf(player) + 1 >= this.state.players.length ? this.state.players[0] : this.state.players[this.state.players.indexOf(player) + 1]),\n        drawAmount: this.state.drawAmount + 2\n      }, () => this.state.player.cards.length == 0 ? this.winner(this.state.player.user) : null)\n    })\n    io.on('draw4.played', (playedCard) => {\n      let player = this.state.players.find(player => player.id === this.state.turn.id)\n      this.setState({\n        player: {...this.state.player, cards: this.state.player.cards.filter(card => card.id != playedCard.id)},\n        discard: playedCard,\n        turn: (this.state.players.indexOf(player) + 1 >= this.state.players.length ? this.state.players[0] : this.state.players[this.state.players.indexOf(player) + 1]),\n        drawAmount: this.state.drawAmount + 4,\n        colorSelect: false\n      }, () => this.state.player.cards.length == 0 ? this.winner(this.state.player.user) : null)\n    })\n    io.on('wild.played', (playedCard) => {\n      let player = this.state.players.find(player => player.id === this.state.turn.id)\n      this.setState({\n        player: {...this.state.player, cards: this.state.player.cards.filter(card => card.id != playedCard.id)},\n        discard: playedCard,\n        turn: (this.state.players.indexOf(player) + 1 >= this.state.players.length ? this.state.players[0] : this.state.players[this.state.players.indexOf(player) + 1]),\n        colorSelect: false\n      }, () => this.state.player.cards.length == 0 ? this.winner(this.state.player.user) : null)\n    })\n  }\n\n  deal = () => {\n    if(this.state.player.user.id == this.state.turn.id){\n      let x = 0;\n      let drawCards = this.state.drawCards\n      while (x < 7) {\n        let randomNumber = Math.floor(Math.random() * drawCards.length);\n        let drawnCard = drawCards[randomNumber];\n\n        this.state.player.cards.push(drawnCard);\n        drawCards = drawCards.filter(card => card != drawnCard)\n        x = x + 1;\n      }\n      this.setState({ drawCards })\n      io.emit('cards.dealt', drawCards)\n      io.emit('next.deal', this.state.turn);\n    }\n  };\n\n  getCreator = id => {\n    io.emit(\"creator.get\", id);\n    io.on(\"creator.send\", creator => {\n      this.setState({\n        players: [...this.props.players, creator],\n        creator: creator,\n        turn: this.state.players[0]\n      });\n    });\n  };\n\n  handleDeal = () => {\n    io.emit(\"deal\");\n  };\n\n  handleDraw = () => {\n    if(this.state.player.user.id === this.state.turn.id){\n      if(this.state.drawAmount == 0){\n        let drawCards = this.state.drawCards\n        \n        let randomNumber = Math.floor(Math.random() * drawCards.length);\n        let drawnCard = drawCards[randomNumber];\n        drawCards = drawCards.filter(card => card.id != drawnCard.id)\n        \n        this.setState({player: {...this.state.player, cards: [...this.state.player.cards, drawnCard]}})\n        return io.emit('draw', drawCards)\n      }\n      \n      let drawAmount = this.state.drawAmount\n      let drawCards = this.state.drawCards\n      let drawnCards = []\n\n      while(drawAmount > 0){\n        let randomNumber = Math.floor(Math.random() * drawCards.length);\n        let drawnCard = drawCards[randomNumber];\n        drawCards = drawCards.filter(card => card.id != drawnCard.id)\n        drawnCards.push(drawnCard)\n\n        drawAmount = drawAmount - 1\n      }\n      this.setState({player: {...this.state.player, cards: [...this.state.player.cards, ...drawnCards]}})\n      io.emit('draw', drawCards)\n    }\n  }\n\n  handlePlay = (playedCard) => {\n    console.log(playedCard)\n    let drawAmount = this.state.drawAmount\n    if(this.state.player.user.id === this.state.turn.id){\n      if(!this.state.discard){\n        if(playedCard.type == 'wild'){\n          this.setState({\n            colorSelect: true,\n            playedCard\n          })\n        }\n        if(playedCard.type == 'wild'){\n          this.setState({\n            colorSelect: true,\n            playedCard\n          })\n        }\n        if(playedCard.type == '+2'){\n          return io.emit('draw2.play', playedCard)\n        }\n        if(playedCard.type == 'skip'){\n          return io.emit('skip.play', playedCard)\n        }\n        if(playedCard.type == 'reverse'){\n          return io.emit('reverse.play', playedCard)\n        }\n        return io.emit('normal.play', playedCard)\n      }\n      if(drawAmount == 0){\n        if(playedCard.type == 'wild'){\n          this.setState({\n            colorSelect: true,\n            playedCard\n          })\n        }\n        if(playedCard.type == '+4'){\n          this.setState({\n            colorSelect: true,\n            playedCard\n          })\n        }\n        if((playedCard.type == this.state.discard.type) || (playedCard.color == this.state.discard.color)){\n          if(playedCard.type == '+2'){\n            return io.emit('draw2.play', playedCard)\n          }\n          if(playedCard.type == 'skip'){\n            return io.emit('skip.play', playedCard)\n          }\n          if(playedCard.type == 'reverse'){\n            return io.emit('reverse.play', playedCard)\n          }\n          return io.emit('normal.play', playedCard)\n        }\n      }\n      if(playedCard.type == this.state.discard.type){\n        if(playedCard.type == '+4'){\n          this.setState({\n            colorSelect: true,\n            playedCard\n          })\n        }\n        if(playedCard.type == '+2'){\n          return io.emit('draw2.play', playedCard)\n        }\n      }\n    }\n  }\n\n  winner = (player) => {\n    // What happens when you win?\n    console.log(`${player.username} wins`)\n  }\n\n  render() {\n    if (this.state.deal) {\n      return (\n        <div>\n          {this.state.colorSelect ? <ColorSelect handleColorSelect={this.handleColrSelect}/> : \n            <GamePlay\n              drawCards={this.state.drawCards}\n              cards={this.state.player.cards}\n              turn={this.state.turn.username}\n              handlePlay={this.handlePlay}\n              discard={this.state.discard}\n              handleDraw={this.handleDraw}\n              colorSelect={this.state.colorSelect}\n            />}\n        </div>\n      );\n    }\n    return (\n      <div className=\"ui raised very padded text container segment form\">\n        {this.state.game ? (\n          <div>\n            <h1>{this.state.game.name}</h1>\n            <h2>{this.state.player.user.username}</h2>\n            <h3>Creator: {this.state.creator.username}</h3>\n          </div>\n        ) : null}\n        {this.state.players.map(player => {\n          return <h3>{player.username}</h3>;\n        })}\n        {this.props.user.id == this.state.creator.id ? (\n          <div className=\"ui massive green button\" onClick={this.handleDeal}>\n            Deal\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}