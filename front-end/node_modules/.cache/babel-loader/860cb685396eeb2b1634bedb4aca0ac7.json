{"ast":null,"code":"import _objectSpread from \"/Users/nathanbuchanan/Desktop/React/uno/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/nathanbuchanan/Desktop/React/uno/front-end/src/Components/GameScreen.js\";\nimport React, { Component } from \"react\";\nimport cards from \"../cards\";\nimport GamePlay from \"./GamePlay\";\nimport { io } from \"../Socket\";\nexport default class GameScreen extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      allCards: [],\n      game: null,\n      players: [],\n      creator: {},\n      player: {\n        user: {},\n        cards: []\n      },\n      deal: false,\n      drawCards: [],\n      turn: null,\n      discard: null\n    };\n\n    this.deal = () => {\n      if (this.state.player.user.id == this.state.turn.id) {\n        let x = 0;\n        let drawCards = this.state.drawCards;\n\n        while (x < 7) {\n          let randomNumber = Math.floor(Math.random() * drawCards.length);\n          let drawnCard = drawCards[randomNumber];\n          this.state.player.cards.push(drawnCard);\n          drawCards = drawCards.filter(card => card != drawnCard);\n          x = x + 1;\n        }\n\n        this.setState({\n          drawCards\n        });\n        io.emit(\"cards.dealt\", drawCards);\n        io.emit(\"next.deal\", this.state.turn);\n      }\n    };\n\n    this.getCreator = id => {\n      io.emit(\"creator.get\", id);\n      io.on(\"creator.send\", creator => {\n        this.setState({\n          players: [...this.props.players, creator],\n          creator: creator,\n          turn: this.state.players[0]\n        });\n      });\n    };\n\n    this.handleDeal = () => {\n      io.emit(\"deal\");\n    };\n\n    this.handleDrawOne = () => {\n      if (this.state.player.user.id === this.state.turn.id) {\n        let drawCards = this.state.drawCards;\n        let randomNumber = Math.floor(Math.random() * drawCards.length);\n        let drawnCard = drawCards[randomNumber];\n        drawCards = drawCards.filter(card => card.id != drawnCard.id);\n        this.setState({\n          player: _objectSpread({}, this.state.player, {\n            cards: [...this.state.player.cards, drawnCard]\n          })\n        });\n        io.emit(\"draw1\", drawCards);\n      }\n    };\n\n    this.handlePlay = playedCard => {\n      console.log(playedCard);\n\n      if (this.state.player.user.id === this.state.turn.id) {\n        if (playedCard.color == \"darkgray\") {\n          if (playedCard.type == \"wild\") {//player selects color\n            //return io.emit('wild.play', [playedCard, color])\n          }\n\n          if (playedCard.type == \"+4\") {//player selects color\n            //next player can draw 4 cards, play draw 4 or draw 2 of selected color\n            //return io.emit('draw4.play', [playedCard, color])\n          }\n        }\n\n        if (!this.state.discard) {\n          return io.emit(\"first.card.play\", playedCard);\n        }\n\n        if (playedCard.type == this.state.discard.type || playedCard.color == this.state.discard.color) {\n          if (playedCard.type == \"skip\") {\n            return io.emit(\"skip.play\", playedCard);\n          }\n\n          if (playedCard.type == \"reverse\") {\n            return io.emit(\"reverse.play\", playedCard);\n          }\n\n          if (playedCard.type == \"+2\") {//next player can draw 2 or play +2 or +4\n            //return io.emit('draw2.play, playedCard)\n          }\n\n          return io.emit(\"normal.play\", playedCard);\n        }\n      }\n    };\n\n    this.winner = player => {\n      // What happens when you win?\n      console.log(`${player.username} wins`);\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      allCards: cards,\n      game: this.props.game,\n      players: this.props.players,\n      player: {\n        user: this.props.user,\n        cards: []\n      },\n      drawCards: cards\n    });\n    this.getCreator(this.props.game.creator_id);\n    io.on(\"drawCards.new\", cards => this.setState({\n      drawCards: cards\n    }));\n    io.on(\"dealt\", () => {\n      this.setState({\n        deal: true\n      });\n      this.deal();\n    });\n    io.on(\"next.dealt\", ({\n      id\n    }) => {\n      let player = this.state.players.find(player => player.id === id);\n\n      if (this.state.players.indexOf(player) + 2 <= this.state.players.length) {\n        return this.setState({\n          turn: this.state.players[this.state.players.indexOf(player) + 1]\n        }, () => this.deal());\n      }\n\n      return this.setState({\n        turn: this.state.players[0]\n      });\n    });\n    io.on(\"first.card.played\", playedCard => {\n      this.setState({\n        player: _objectSpread({}, this.state.player, {\n          cards: this.state.player.cards.filter(card => card.id != playedCard.id)\n        }),\n        discard: playedCard,\n        turn: this.state.players[1]\n      }, () => this.state.player.cards.length == 0 ? this.winner(this.state.player.user) : null);\n    });\n    io.on(\"drew1\", cards => {\n      let player = this.state.players.find(player => player.id === this.state.turn.id);\n      this.setState({\n        drawCards: cards,\n        turn: this.state.players.indexOf(player) + 1 >= this.state.players.length ? this.state.players[0] : this.state.players[this.state.players.indexOf(player) + 1]\n      });\n    });\n    io.on(\"normal.played\", playedCard => {\n      let player = this.state.players.find(player => player.id === this.state.turn.id);\n      this.setState({\n        player: _objectSpread({}, this.state.player, {\n          cards: this.state.player.cards.filter(card => card.id != playedCard.id)\n        }),\n        discard: playedCard,\n        turn: this.state.players.indexOf(player) + 1 >= this.state.players.length ? this.state.players[0] : this.state.players[this.state.players.indexOf(player) + 1]\n      }, () => this.state.player.cards.length == 0 ? this.winner(this.state.player.user) : null);\n    });\n    io.on(\"skip.played\", playedCard => {\n      let player = this.state.players.find(player => player.id === this.state.turn.id);\n      this.setState({\n        player: _objectSpread({}, this.state.player, {\n          cards: this.state.player.cards.filter(card => card.id != playedCard.id)\n        }),\n        discard: playedCard,\n        turn: this.state.players.indexOf(player) + 1 == this.state.players.length ? this.state.players[1] : this.state.players.indexOf(player) + 2 == this.state.players.length ? this.state.players[0] : this.state.players[this.state.players.indexOf(player) + 2]\n      }, () => this.state.player.cards.length == 0 ? this.winner(this.state.player.user) : null);\n    });\n    io.on(\"reverse.played\", playedCard => {\n      let player = this.state.players.find(player => player.id === this.state.turn.id);\n      this.setState({\n        player: _objectSpread({}, this.state.player, {\n          cards: this.state.player.cards.filter(card => card.id != playedCard.id)\n        }),\n        discard: playedCard,\n        turn: this.state.players.indexOf(player) == 0 ? this.state.players[this.state.players.length - 1] : this.state.players[this.state.players.indexOf(player) - 1],\n        players: this.state.players.reverse()\n      }, () => this.state.player.cards.length == 0 ? this.winner(this.state.player.user) : null);\n    });\n  }\n\n  render() {\n    if (this.state.deal) {\n      return React.createElement(GamePlay, {\n        drawCards: this.state.drawCards,\n        cards: this.state.player.cards,\n        turn: this.state.turn.username,\n        handlePlay: this.handlePlay,\n        discard: this.state.discard,\n        handleDrawOne: this.handleDrawOne,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"ui raised very padded text container segment form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, this.state.game ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, this.state.game.name), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, this.state.player.user.username), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, \"Creator: \", this.state.creator.username)) : null, this.state.players.map(player => {\n      return React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, player.username);\n    }), this.props.user.id == this.state.creator.id ? React.createElement(\"div\", {\n      className: \"ui massive green button\",\n      onClick: this.handleDeal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, \"Deal\") : null);\n  }\n\n}","map":{"version":3,"sources":["/Users/nathanbuchanan/Desktop/React/uno/front-end/src/Components/GameScreen.js"],"names":["React","Component","cards","GamePlay","io","GameScreen","state","allCards","game","players","creator","player","user","deal","drawCards","turn","discard","id","x","randomNumber","Math","floor","random","length","drawnCard","push","filter","card","setState","emit","getCreator","on","props","handleDeal","handleDrawOne","handlePlay","playedCard","console","log","color","type","winner","username","componentDidMount","creator_id","find","indexOf","reverse","render","name","map"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport cards from \"../cards\";\nimport GamePlay from \"./GamePlay\";\nimport { io } from \"../Socket\";\n\nexport default class GameScreen extends Component {\n  state = {\n    allCards: [],\n    game: null,\n    players: [],\n    creator: {},\n    player: {\n      user: {},\n      cards: []\n    },\n    deal: false,\n    drawCards: [],\n    turn: null,\n    discard: null\n  };\n\n  componentDidMount() {\n    this.setState({\n      allCards: cards,\n      game: this.props.game,\n      players: this.props.players,\n      player: {\n        user: this.props.user,\n        cards: []\n      },\n      drawCards: cards\n    });\n    this.getCreator(this.props.game.creator_id);\n    io.on(\"drawCards.new\", cards => this.setState({ drawCards: cards }));\n    io.on(\"dealt\", () => {\n      this.setState({ deal: true });\n      this.deal();\n    });\n    io.on(\"next.dealt\", ({ id }) => {\n      let player = this.state.players.find(player => player.id === id);\n      if (this.state.players.indexOf(player) + 2 <= this.state.players.length) {\n        return this.setState(\n          {\n            turn: this.state.players[this.state.players.indexOf(player) + 1]\n          },\n          () => this.deal()\n        );\n      }\n      return this.setState({ turn: this.state.players[0] });\n    });\n    io.on(\"first.card.played\", playedCard => {\n      this.setState(\n        {\n          player: {\n            ...this.state.player,\n            cards: this.state.player.cards.filter(\n              card => card.id != playedCard.id\n            )\n          },\n          discard: playedCard,\n          turn: this.state.players[1]\n        },\n        () =>\n          this.state.player.cards.length == 0\n            ? this.winner(this.state.player.user)\n            : null\n      );\n    });\n    io.on(\"drew1\", cards => {\n      let player = this.state.players.find(\n        player => player.id === this.state.turn.id\n      );\n      this.setState({\n        drawCards: cards,\n        turn:\n          this.state.players.indexOf(player) + 1 >= this.state.players.length\n            ? this.state.players[0]\n            : this.state.players[this.state.players.indexOf(player) + 1]\n      });\n    });\n    io.on(\"normal.played\", playedCard => {\n      let player = this.state.players.find(\n        player => player.id === this.state.turn.id\n      );\n      this.setState(\n        {\n          player: {\n            ...this.state.player,\n            cards: this.state.player.cards.filter(\n              card => card.id != playedCard.id\n            )\n          },\n          discard: playedCard,\n          turn:\n            this.state.players.indexOf(player) + 1 >= this.state.players.length\n              ? this.state.players[0]\n              : this.state.players[this.state.players.indexOf(player) + 1]\n        },\n        () =>\n          this.state.player.cards.length == 0\n            ? this.winner(this.state.player.user)\n            : null\n      );\n    });\n    io.on(\"skip.played\", playedCard => {\n      let player = this.state.players.find(\n        player => player.id === this.state.turn.id\n      );\n      this.setState(\n        {\n          player: {\n            ...this.state.player,\n            cards: this.state.player.cards.filter(\n              card => card.id != playedCard.id\n            )\n          },\n          discard: playedCard,\n          turn:\n            this.state.players.indexOf(player) + 1 == this.state.players.length\n              ? this.state.players[1]\n              : this.state.players.indexOf(player) + 2 ==\n                this.state.players.length\n              ? this.state.players[0]\n              : this.state.players[this.state.players.indexOf(player) + 2]\n        },\n        () =>\n          this.state.player.cards.length == 0\n            ? this.winner(this.state.player.user)\n            : null\n      );\n    });\n    io.on(\"reverse.played\", playedCard => {\n      let player = this.state.players.find(\n        player => player.id === this.state.turn.id\n      );\n      this.setState(\n        {\n          player: {\n            ...this.state.player,\n            cards: this.state.player.cards.filter(\n              card => card.id != playedCard.id\n            )\n          },\n          discard: playedCard,\n          turn:\n            this.state.players.indexOf(player) == 0\n              ? this.state.players[this.state.players.length - 1]\n              : this.state.players[this.state.players.indexOf(player) - 1],\n          players: this.state.players.reverse()\n        },\n        () =>\n          this.state.player.cards.length == 0\n            ? this.winner(this.state.player.user)\n            : null\n      );\n    });\n  }\n\n  deal = () => {\n    if (this.state.player.user.id == this.state.turn.id) {\n      let x = 0;\n      let drawCards = this.state.drawCards;\n      while (x < 7) {\n        let randomNumber = Math.floor(Math.random() * drawCards.length);\n        let drawnCard = drawCards[randomNumber];\n\n        this.state.player.cards.push(drawnCard);\n        drawCards = drawCards.filter(card => card != drawnCard);\n        x = x + 1;\n      }\n      this.setState({ drawCards });\n      io.emit(\"cards.dealt\", drawCards);\n      io.emit(\"next.deal\", this.state.turn);\n    }\n  };\n\n  getCreator = id => {\n    io.emit(\"creator.get\", id);\n    io.on(\"creator.send\", creator => {\n      this.setState({\n        players: [...this.props.players, creator],\n        creator: creator,\n        turn: this.state.players[0]\n      });\n    });\n  };\n\n  handleDeal = () => {\n    io.emit(\"deal\");\n  };\n\n  handleDrawOne = () => {\n    if (this.state.player.user.id === this.state.turn.id) {\n      let drawCards = this.state.drawCards;\n      let randomNumber = Math.floor(Math.random() * drawCards.length);\n\n      let drawnCard = drawCards[randomNumber];\n      drawCards = drawCards.filter(card => card.id != drawnCard.id);\n\n      this.setState({\n        player: {\n          ...this.state.player,\n          cards: [...this.state.player.cards, drawnCard]\n        }\n      });\n      io.emit(\"draw1\", drawCards);\n    }\n  };\n\n  handlePlay = playedCard => {\n    console.log(playedCard);\n    if (this.state.player.user.id === this.state.turn.id) {\n      if (playedCard.color == \"darkgray\") {\n        if (playedCard.type == \"wild\") {\n          //player selects color\n          //return io.emit('wild.play', [playedCard, color])\n        }\n        if (playedCard.type == \"+4\") {\n          //player selects color\n          //next player can draw 4 cards, play draw 4 or draw 2 of selected color\n          //return io.emit('draw4.play', [playedCard, color])\n        }\n      }\n      if (!this.state.discard) {\n        return io.emit(\"first.card.play\", playedCard);\n      }\n      if (\n        playedCard.type == this.state.discard.type ||\n        playedCard.color == this.state.discard.color\n      ) {\n        if (playedCard.type == \"skip\") {\n          return io.emit(\"skip.play\", playedCard);\n        }\n        if (playedCard.type == \"reverse\") {\n          return io.emit(\"reverse.play\", playedCard);\n        }\n        if (playedCard.type == \"+2\") {\n          //next player can draw 2 or play +2 or +4\n          //return io.emit('draw2.play, playedCard)\n        }\n        return io.emit(\"normal.play\", playedCard);\n      }\n    }\n  };\n\n  winner = player => {\n    // What happens when you win?\n    console.log(`${player.username} wins`);\n  };\n\n  render() {\n    if (this.state.deal) {\n      return (\n        <GamePlay\n          drawCards={this.state.drawCards}\n          cards={this.state.player.cards}\n          turn={this.state.turn.username}\n          handlePlay={this.handlePlay}\n          discard={this.state.discard}\n          handleDrawOne={this.handleDrawOne}\n        />\n      );\n    }\n    return (\n      <div className=\"ui raised very padded text container segment form\">\n        {this.state.game ? (\n          <div>\n            <h1>{this.state.game.name}</h1>\n            <h2>{this.state.player.user.username}</h2>\n            <h3>Creator: {this.state.creator.username}</h3>\n          </div>\n        ) : null}\n        {this.state.players.map(player => {\n          return <h3>{player.username}</h3>;\n        })}\n        {this.props.user.id == this.state.creator.id ? (\n          <div className=\"ui massive green button\" onClick={this.handleDeal}>\n            Deal\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}