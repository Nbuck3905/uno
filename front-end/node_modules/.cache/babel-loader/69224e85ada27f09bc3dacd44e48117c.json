{"ast":null,"code":"import _objectSpread from \"/Users/flatironstudent/Desktop/Joseph/Module4/uno/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/flatironstudent/Desktop/Joseph/Module4/uno/front-end/src/Components/GameScreen.js\";\nimport React, { Component } from \"react\";\nimport cards from \"../cards\";\nimport GamePlay from \"./GamePlay\";\nimport { io } from \"../Socket\";\nexport default class GameScreen extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      allCards: [],\n      game: null,\n      players: [],\n      creator: {},\n      player: {\n        user: {},\n        cards: []\n      },\n      deal: false,\n      drawCards: [],\n      turn: null,\n      discard: null,\n      drawAmount: 0\n    };\n\n    this.deal = () => {\n      if (this.state.player.user.id == this.state.turn.id) {\n        let x = 0;\n        let drawCards = this.state.drawCards;\n\n        while (x < 7) {\n          let randomNumber = Math.floor(Math.random() * drawCards.length);\n          let drawnCard = drawCards[randomNumber];\n          this.state.player.cards.push(drawnCard);\n          drawCards = drawCards.filter(card => card != drawnCard);\n          x = x + 1;\n        }\n\n        this.setState({\n          drawCards\n        });\n        io.emit('cards.dealt', drawCards);\n        io.emit('next.deal', this.state.turn);\n      }\n    };\n\n    this.getCreator = id => {\n      io.emit(\"creator.get\", id);\n      io.on(\"creator.send\", creator => {\n        this.setState({\n          players: [...this.props.players, creator],\n          creator: creator,\n          turn: this.state.players[0]\n        });\n      });\n    };\n\n    this.handleDeal = () => {\n      io.emit(\"deal\");\n    };\n\n    this.handleDraw = () => {\n      if (this.state.player.user.id === this.state.turn.id) {\n        let drawAmount = this.state.drawAmount;\n\n        if (drawAmount == 0) {\n          io.emit('draw1');\n        }\n\n        while (drawAmount > 0) {\n          let drawCards = this.state.drawCards;\n          let randomNumber = Math.floor(Math.random() * drawCards.length);\n          let drawnCard = drawCards[randomNumber];\n          drawCards = drawCards.filter(card => card.id != drawnCard.id);\n          this.setState({\n            player: _objectSpread({}, this.state.player, {\n              cards: [...this.state.player.cards, drawnCard]\n            })\n          });\n          drawAmount = drawAmount - 1;\n        }\n\n        this.setS;\n      }\n    };\n\n    this.handlePlay = playedCard => {\n      console.log(playedCard);\n      let drawAmount = this.state.drawAmount;\n\n      if (this.state.player.user.id === this.state.turn.id) {\n        if (!this.state.discard) {\n          if (playedCard.type == 'wild') {//player selects color\n            //return io.emit('wild.play', [playedCard, color])\n          }\n\n          if (playedCard.type == '+4') {//player selects color\n            //next player can draw 4 cards, play draw 4 or draw 2 of selected color\n            //return io.emit('draw4.play', [playedCard, color])\n          }\n\n          if (playedCard.type == '+2') {\n            //next player can draw 2 or play +2 \n            return io.emit('draw2.play', playedCard);\n          }\n\n          if (playedCard.type == 'skip') {\n            return io.emit('skip.play', playedCard);\n          }\n\n          if (playedCard.type == 'reverse') {\n            return io.emit('reverse.play', playedCard);\n          }\n\n          return io.emit('normal.play', playedCard);\n        }\n\n        if (drawAmount == 0) {\n          if (playedCard.type == 'wild') {//player selects color\n            //return io.emit('wild.play', [playedCard, color])\n          }\n\n          if (playedCard.type == '+4') {//player selects color\n            //next player can draw 4 cards, play draw 4 or draw 2 of selected color\n            //return io.emit('draw4.play', [playedCard, color])\n          }\n\n          if (playedCard.type == this.state.discard.type || playedCard.color == this.state.discard.color) {\n            if (playedCard.type == '+2') {//next player can draw 2 or play +2 or +4\n              //return io.emit('draw2.play, playedCard)\n            }\n\n            if (playedCard.type == 'skip') {\n              return io.emit('skip.play', playedCard);\n            }\n\n            if (playedCard.type == 'reverse') {\n              return io.emit('reverse.play', playedCard);\n            }\n\n            return io.emit('normal.play', playedCard);\n          }\n        }\n\n        if (playedCard.type == this.state.discard.type) {\n          if (playedCard.type == '+4') {//player selects color\n            //next player can draw 4 cards, play draw 4 or draw 2 of selected color\n            //return io.emit('draw4.play', [playedCard, color])\n          }\n\n          if (playedCard.type == '+2') {//next player can draw 2 or play +2 or +4\n            //return io.emit('draw2.play, playedCard)\n          }\n        }\n      }\n    };\n\n    this.winner = player => {\n      // What happens when you win?\n      console.log(`${player.username} wins`);\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      allCards: cards,\n      game: this.props.game,\n      players: this.props.players,\n      player: {\n        user: this.props.user,\n        cards: []\n      },\n      drawCards: cards\n    });\n    this.getCreator(this.props.game.creator_id);\n    io.on('drawCards.new', cards => this.setState({\n      drawCards: cards\n    }));\n    io.on(\"dealt\", () => {\n      this.setState({\n        deal: true\n      });\n      this.deal();\n    });\n    io.on('next.dealt', ({\n      id\n    }) => {\n      let player = this.state.players.find(player => player.id === id);\n\n      if (this.state.players.indexOf(player) + 2 <= this.state.players.length) {\n        return this.setState({\n          turn: this.state.players[this.state.players.indexOf(player) + 1]\n        }, () => this.deal());\n      }\n\n      return this.setState({\n        turn: this.state.players[0]\n      });\n    });\n    io.on('drew1', cards => {\n      let player = this.state.players.find(player => player.id === this.state.turn.id);\n      this.setState({\n        drawCards: cards,\n        turn: this.state.players.indexOf(player) + 1 >= this.state.players.length ? this.state.players[0] : this.state.players[this.state.players.indexOf(player) + 1]\n      });\n    });\n    io.on('normal.played', playedCard => {\n      let player = this.state.players.find(player => player.id === this.state.turn.id);\n      this.setState({\n        player: _objectSpread({}, this.state.player, {\n          cards: this.state.player.cards.filter(card => card.id != playedCard.id)\n        }),\n        discard: playedCard,\n        turn: this.state.players.indexOf(player) + 1 >= this.state.players.length ? this.state.players[0] : this.state.players[this.state.players.indexOf(player) + 1]\n      }, () => this.state.player.cards.length == 0 ? this.winner(this.state.player.user) : null);\n    });\n    io.on('skip.played', playedCard => {\n      let player = this.state.players.find(player => player.id === this.state.turn.id);\n      this.setState({\n        player: _objectSpread({}, this.state.player, {\n          cards: this.state.player.cards.filter(card => card.id != playedCard.id)\n        }),\n        discard: playedCard,\n        turn: this.state.players.indexOf(player) + 1 == this.state.players.length ? this.state.players[1] : this.state.players.indexOf(player) + 2 == this.state.players.length ? this.state.players[0] : this.state.players[this.state.players.indexOf(player) + 2]\n      }, () => this.state.player.cards.length == 0 ? this.winner(this.state.player.user) : null);\n    });\n    io.on('reverse.played', playedCard => {\n      let player = this.state.players.find(player => player.id === this.state.turn.id);\n      this.setState({\n        player: _objectSpread({}, this.state.player, {\n          cards: this.state.player.cards.filter(card => card.id != playedCard.id)\n        }),\n        discard: playedCard,\n        turn: this.state.players.indexOf(player) == 0 ? this.state.players[this.state.players.length - 1] : this.state.players[this.state.players.indexOf(player) - 1],\n        players: this.state.players.reverse()\n      }, () => this.state.player.cards.length == 0 ? this.winner(this.state.player.user) : null);\n    });\n    io.on('draw2.played', playedCard => {\n      let player = this.state.players.find(player => player.id === this.state.turn.id);\n      this.setState({\n        player: _objectSpread({}, this.state.player, {\n          cards: this.state.player.cards.filter(card => card.id != playedCard.id)\n        }),\n        discard: playedCard,\n        turn: this.state.players.indexOf(player) + 1 >= this.state.players.length ? this.state.players[0] : this.state.players[this.state.players.indexOf(player) + 1],\n        drawAmount: this.state.drawAmount + 2\n      });\n    });\n  }\n\n  render() {\n    if (this.state.deal) {\n      return React.createElement(GamePlay, {\n        drawCards: this.state.drawCards,\n        cards: this.state.player.cards,\n        turn: this.state.turn.username,\n        handlePlay: this.handlePlay,\n        discard: this.state.discard,\n        handleDrawOne: this.handleDrawOne,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"ui raised very padded text container segment form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, this.state.game ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, this.state.game.name), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, this.state.player.user.username), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, \"Creator: \", this.state.creator.username)) : null, this.state.players.map(player => {\n      return React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, player.username);\n    }), this.props.user.id == this.state.creator.id ? React.createElement(\"div\", {\n      className: \"ui massive green button\",\n      onClick: this.handleDeal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"Deal\") : null);\n  }\n\n}","map":{"version":3,"sources":["/Users/flatironstudent/Desktop/Joseph/Module4/uno/front-end/src/Components/GameScreen.js"],"names":["React","Component","cards","GamePlay","io","GameScreen","state","allCards","game","players","creator","player","user","deal","drawCards","turn","discard","drawAmount","id","x","randomNumber","Math","floor","random","length","drawnCard","push","filter","card","setState","emit","getCreator","on","props","handleDeal","handleDraw","setS","handlePlay","playedCard","console","log","type","color","winner","username","componentDidMount","creator_id","find","indexOf","reverse","render","handleDrawOne","name","map"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport cards from \"../cards\";\nimport GamePlay from \"./GamePlay\";\nimport { io } from \"../Socket\";\n\nexport default class GameScreen extends Component {\n  state = {\n    allCards: [],\n    game: null,\n    players: [],\n    creator: {},\n    player: {\n      user: {},\n      cards: []\n    },\n    deal: false,\n    drawCards: [],\n    turn: null,\n    discard: null,\n    drawAmount: 0\n  };\n\n  componentDidMount() {\n    this.setState({\n      allCards: cards,\n      game: this.props.game,\n      players: this.props.players,\n      player: {\n        user: this.props.user,\n        cards: []\n      },\n      drawCards: cards,\n    });\n    this.getCreator(this.props.game.creator_id);\n    io.on('drawCards.new', (cards) => this.setState({drawCards: cards}))\n    io.on(\"dealt\", () => {\n      this.setState({ deal: true });\n      this.deal();\n    });\n    io.on('next.dealt', ({ id }) => {\n      let player = this.state.players.find(player => player.id === id)\n      if( this.state.players.indexOf(player) + 2 <= this.state.players.length){\n        return this.setState({\n          turn: this.state.players[this.state.players.indexOf(player) + 1]\n        }, () => this.deal())\n      }\n      return this.setState({turn: this.state.players[0]})\n    })\n    io.on('drew1', (cards) => {\n      let player = this.state.players.find(player => player.id === this.state.turn.id)\n      this.setState({\n        drawCards: cards,\n        turn: (this.state.players.indexOf(player) + 1 >= this.state.players.length ? this.state.players[0] : this.state.players[this.state.players.indexOf(player) + 1])\n      })\n    })\n    io.on('normal.played', (playedCard) => {\n      let player = this.state.players.find(player => player.id === this.state.turn.id)\n      this.setState({\n        player: {...this.state.player, cards: this.state.player.cards.filter(card => card.id != playedCard.id)},\n        discard: playedCard,\n        turn: (this.state.players.indexOf(player) + 1 >= this.state.players.length ? this.state.players[0] : this.state.players[this.state.players.indexOf(player) + 1])\n      }, () => this.state.player.cards.length == 0 ? this.winner(this.state.player.user) : null)\n    })\n    io.on('skip.played', (playedCard) => {\n      let player = this.state.players.find(player => player.id === this.state.turn.id)\n      this.setState({\n        player: {...this.state.player, cards: this.state.player.cards.filter(card => card.id != playedCard.id)},\n        discard: playedCard,\n        turn: (this.state.players.indexOf(player) + 1 == this.state.players.length ? this.state.players[1] : (this.state.players.indexOf(player) + 2 == this.state.players.length ? this.state.players[0] : this.state.players[this.state.players.indexOf(player) + 2]))\n      }, () => this.state.player.cards.length == 0 ? this.winner(this.state.player.user) : null)\n    })\n    io.on('reverse.played', (playedCard) => {\n      let player = this.state.players.find(player => player.id === this.state.turn.id)\n      this.setState({\n        player: {...this.state.player, cards: this.state.player.cards.filter(card => card.id != playedCard.id)},\n        discard: playedCard,\n        turn: (this.state.players.indexOf(player) == 0 ? this.state.players[this.state.players.length -1] : this.state.players[this.state.players.indexOf(player) - 1]),\n        players: this.state.players.reverse()\n      }, () => this.state.player.cards.length == 0 ? this.winner(this.state.player.user) : null)\n    })\n    io.on('draw2.played', (playedCard) => {\n      let player = this.state.players.find(player => player.id === this.state.turn.id)\n      this.setState({\n        player: {...this.state.player, cards: this.state.player.cards.filter(card => card.id != playedCard.id)},\n        discard: playedCard,\n        turn: (this.state.players.indexOf(player) + 1 >= this.state.players.length ? this.state.players[0] : this.state.players[this.state.players.indexOf(player) + 1]),\n        drawAmount: this.state.drawAmount + 2\n      })\n    })\n  }\n\n  deal = () => {\n    if(this.state.player.user.id == this.state.turn.id){\n      let x = 0;\n      let drawCards = this.state.drawCards\n      while (x < 7) {\n        let randomNumber = Math.floor(Math.random() * drawCards.length);\n        let drawnCard = drawCards[randomNumber];\n\n        this.state.player.cards.push(drawnCard);\n        drawCards = drawCards.filter(card => card != drawnCard)\n        x = x + 1;\n      }\n      this.setState({ drawCards })\n      io.emit('cards.dealt', drawCards)\n      io.emit('next.deal', this.state.turn);\n    }\n  };\n\n  getCreator = id => {\n    io.emit(\"creator.get\", id);\n    io.on(\"creator.send\", creator => {\n      this.setState({\n        players: [...this.props.players, creator],\n        creator: creator,\n        turn: this.state.players[0]\n      });\n    });\n  };\n\n  handleDeal = () => {\n    io.emit(\"deal\");\n  };\n\n  handleDraw = () => {\n    if(this.state.player.user.id === this.state.turn.id){\n      let drawAmount = this.state.drawAmount\n      if(drawAmount == 0){\n        io.emit('draw1',)\n      }\n      while(drawAmount > 0){\n        let drawCards = this.state.drawCards\n        let randomNumber = Math.floor(Math.random() * drawCards.length);\n\n        let drawnCard = drawCards[randomNumber];\n        drawCards = drawCards.filter(card => card.id != drawnCard.id)\n\n        this.setState({player: {...this.state.player, cards: [...this.state.player.cards, drawnCard]}})\n        drawAmount = drawAmount - 1\n      }\n      this.setS\n    }\n  }\n\n  handlePlay = (playedCard) => {\n    console.log(playedCard)\n    let drawAmount = this.state.drawAmount\n    if(this.state.player.user.id === this.state.turn.id){\n      if(!this.state.discard){\n        if(playedCard.type == 'wild'){\n          //player selects color\n          //return io.emit('wild.play', [playedCard, color])\n        }\n        if(playedCard.type == '+4'){\n          //player selects color\n          //next player can draw 4 cards, play draw 4 or draw 2 of selected color\n          //return io.emit('draw4.play', [playedCard, color])\n        }\n        if(playedCard.type == '+2'){\n          //next player can draw 2 or play +2 \n          return io.emit('draw2.play', playedCard)\n        }\n        if(playedCard.type == 'skip'){\n          return io.emit('skip.play', playedCard)\n        }\n        if(playedCard.type == 'reverse'){\n          return io.emit('reverse.play', playedCard)\n        }\n        return io.emit('normal.play', playedCard)\n      }\n      if(drawAmount == 0){\n        if(playedCard.type == 'wild'){\n          //player selects color\n          //return io.emit('wild.play', [playedCard, color])\n        }\n        if(playedCard.type == '+4'){\n          //player selects color\n          //next player can draw 4 cards, play draw 4 or draw 2 of selected color\n          //return io.emit('draw4.play', [playedCard, color])\n        }\n        if((playedCard.type == this.state.discard.type) || (playedCard.color == this.state.discard.color)){\n          if(playedCard.type == '+2'){\n            //next player can draw 2 or play +2 or +4\n            //return io.emit('draw2.play, playedCard)\n          }\n          if(playedCard.type == 'skip'){\n            return io.emit('skip.play', playedCard)\n          }\n          if(playedCard.type == 'reverse'){\n            return io.emit('reverse.play', playedCard)\n          }\n          return io.emit('normal.play', playedCard)\n        }\n      }\n      if(playedCard.type == this.state.discard.type){\n        if(playedCard.type == '+4'){\n          //player selects color\n          //next player can draw 4 cards, play draw 4 or draw 2 of selected color\n          //return io.emit('draw4.play', [playedCard, color])\n        }\n        if(playedCard.type == '+2'){\n          //next player can draw 2 or play +2 or +4\n          //return io.emit('draw2.play, playedCard)\n        }\n      }\n    }\n  }\n\n  winner = (player) => {\n    // What happens when you win?\n    console.log(`${player.username} wins`)\n  }\n\n  render() {\n    if (this.state.deal) {\n      return (\n        <GamePlay\n          drawCards={this.state.drawCards}\n          cards={this.state.player.cards}\n          turn={this.state.turn.username}\n          handlePlay={this.handlePlay}\n          discard={this.state.discard}\n          handleDrawOne={this.handleDrawOne}\n        />\n      );\n    }\n    return (\n      <div className=\"ui raised very padded text container segment form\">\n        {this.state.game ? (\n          <div>\n            <h1>{this.state.game.name}</h1>\n            <h2>{this.state.player.user.username}</h2>\n            <h3>Creator: {this.state.creator.username}</h3>\n          </div>\n        ) : null}\n        {this.state.players.map(player => {\n          return <h3>{player.username}</h3>;\n        })}\n        {this.props.user.id == this.state.creator.id ? (\n          <div className=\"ui massive green button\" onClick={this.handleDeal}>\n            Deal\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}